{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Keep in low-key wind","text":"<p>Here you can catch a glimpse of notes of courses at ZJU from a student majoring in CSE.</p> <p>Also, I share some of my experience in Blog.</p> <p>Wish you a good reading time.</p> <ul> <li> <p> \u5fc3\u8a00\u5fc3\u8bed</p> <ul> <li>May Day Holiday</li> </ul> </li> </ul> <ul> <li> <p> \u7a7a\u8bf4\u65e0\u51ed</p> <ul> <li>Numerical Analysis</li> <li>Modern Control Theory</li> </ul> </li> </ul>"},{"location":"friends/","title":"Welcome to Join my Friend Zone!","text":"Maythics Little Mouse SyncrnzdClk Medium Cat Little_Whale Great Whale LastingWind Giant in Stu'Union"},{"location":"blog/","title":"Blog","text":"<p>In this part, I hope you can stand my childish thoughts and points.</p>"},{"location":"blog/Travel/","title":"Preface","text":"<p>Write down the life before it passes by...</p>"},{"location":"blog/Travel/5th_05_24/","title":"\u5c0f\u957f\u5047\u51fa\u6e38","text":"<p>\u5047\u671f\u76ee\u6807\uff1a\u4ece\u5404\u7c7b\u4e8b\u9879\u4e2d\u89e3\u653e\u51fa\u6765\uff0c\u601d\u8003\u603b\u7ed3\u524d\u534a\u4e2a\u5b66\u671f\u7684\u751f\u5b58\u72b6\u6001\u3002</p> <p>\u884c\u52a8\u539f\u5219\uff1a\u6162\u4e0b\u6765\uff0c\u6162\u4e0b\u6765\u3002</p>"},{"location":"blog/Travel/5th_05_24/#430-52","title":"4.30-5.2","text":"<p>\u9996\u5148\u611f\u8c22\u591c\u5bb5\u7ec4\u4f19\u4f34\u7684\u5b89\u6392\uff0c\u7279\u522b\u611f\u8c22\u5c0f\ud83d\udc1f\u7684\u7edf\u7b79\uff0c\u5c0f\ud83c\udf43\u7684\u666f\u5fb7\u9547\u8ba1\u5212\uff0c\u8ba9\u6211\u4eec\u7684\u6574\u4e2a\u884c\u7a0b\u90fd\u975e\u5e38\u987a\u5229\u3002</p> <p>\u4e00\u5927\u65e9\u5c31\u5f00\u59cb\u7fd8\u8bfe\u51fa\u884c\uff0c\u6211\u4eec\u5148\u5750\u9ad8\u94c1\u5230\u8fbe\u5a7a\u6e90\uff0c\u542f\u52a8\u81ea\u9a7e\u6a21\u5f0f\uff0c\u4e09\u5929\u53bb\u4e86\u7bc1\u5cad\u3001\u4e09\u6e05\u5c71\u548c\u666f\u5fb7\u9547\u3002</p>"},{"location":"blog/Travel/5th_05_24/#430","title":"4.30","text":"<p>\u7b2c\u4e00\u5929\u7684\u7bc1\u5cad\u7740\u5b9e\u8ba9\u4eba\u773c\u524d\u4e00\u4eae\uff0c\u5f88\u591a\u7167\u7247\uff0c\u65e0\u8bba\u662f\u98ce\u666f\u8fd8\u662f\u4eba\u7269\uff0c\u90fd\u5f88\u4e0a\u955c\u3002\u4ece\u73bb\u7483\u6808\u9053\uff08\u5792\u5fc3\u6865\uff09\u5230\u508d\u5c71\u5c0f\u9547\uff08\u82b1\u6eaa\u6c34\u8857\uff09\uff0c\u4ece\u675c\u9e43\u56ed\u5230\u98d8\u96ea\u6c11\u56fd\u9986\uff0c\u7edd\u7f8e\u7684\u5c71\u95f4\u98ce\u5149\u3001\u7eaf\u51c0\u7684\u5c71\u95f4\u7a7a\u6c14\uff0c\u8ba9\u4e00\u4e2a\u957f\u671f\u751f\u6d3b\u5728\u95ed\u585e\u6821\u56ed\u91cc\u7684\u4eba\u611f\u5230\u65e2\u964c\u751f\u53c8\u4eb2\u5207\u3002</p>"},{"location":"blog/Travel/5th_05_24/#51","title":"5.1","text":"<p>\u65e9\u6668\u9192\u6765\uff0c\u521a\u53d1\u751f\u7684\u5e7f\u4e1c\u6885\u5927\u9ad8\u901f\u584c\u9677\u8ba9\u6211\u5403\u4e86\u4e00\u5927\u60ca\u3002\u540e\u9762\u4ece\u4e09\u6e05\u5c71\u56de\u6765\u5f00\u9ad8\u901f\u7684\u65f6\u5019\uff0c\u5176\u5b9e\u6709\u4e00\u70b9\u5bd2\u98a4\u3002</p> <p>\u4e09\u6e05\u5c71\u6211\u66fe\u7ecf\u53bb\u8fc7\u4e00\u6b21\uff0c\u8bb0\u5fc6\u4e2d\u5370\u8c61\u975e\u5e38\u4e0d\u9519\uff0c\u4e91\u96fe\u7f2d\u7ed5\uff0c\u4eba\u4eec\u508d\u5c71\u800c\u884c\uff0c\u5982\u4e34\u4ed9\u5883\u3002\u7136\u800c\uff0c\u8fd9\u6b21\u975e\u5e38\u7684\u4e0d\u884c\uff0c\u4e91\u96fe\u8fc7\u4e8e\u6d53\u91cd\uff0c\u5927\u90e8\u5206\u7684\u5c71\u95f4\u7f8e\u666f\u90fd\u65e0\u6cd5\u6e05\u65b0\u7528\u773c\u770b\u89c1\uff08\u6216\u8bb8\u53ef\u4ee5\u8bd5\u8bd5\u5176\u4ed6\u6ce2\u6bb5\u7684\u5149hh\uff09\u3002</p> <p>\u5728\u80fd\u89c1\u5ea6\u4e0d\u523010m\u7684\u5c71\u95f4\uff0c\u62cd\u7167\u51e0\u4e4e\u662f\u4e00\u4ef6\u5403\u529b\u4e0d\u8ba8\u597d\u7684\u4e8b\u60c5\u3002\u597d\u5728\u6211\u4eec\u6700\u540e\u4e5f\u627e\u5230\u4e86\u8bb8\u591a\u7684\u62cd\u7167\u70b9\uff0c\u8d4b\u4e88\u6d53\u96fe\u91cc\u7684\u5c71\u548c\u6211\u4eec\u4e00\u70b9\u7279\u522b\u7684\u610f\u4e49\u3002</p> <p>\u53e6\u5916\uff0c\u4e94\u4e00\u4eba\u6570\u8fc7\u591a\uff0c\u4e0b\u5c71\u6392\u961f\u7b49\u5019\u8d85\u8fc7\u4e00\u4e2a\u534a\u5c0f\u65f6\uff0c\u4e5f\u662f\u4e00\u4e2a\u51cf\u5206\u9879\u3002</p>"},{"location":"blog/Travel/5th_05_24/#52","title":"5.2","text":"<p>\u6211\u4eec\u53bb\u5230\u4e86\u666f\u5fb7\u9547\uff0c\u4f53\u4f1a\u4e86\u4e00\u4e0b\u4e2d\u56fd\u74f7\u90fd\u7684\u97f5\u5473\u3002\u6211\u672c\u4eba\u5bf9\u4e8e\u74f7\u5668\u5e76\u65e0\u592a\u5927\u611f\u53d7\uff0c\u74f7\u5668\u53ca\u5176\u4ecb\u7ecd\u4e5f\u53ea\u662f\u8d70\u9a6c\u89c2\u82b1\u5306\u5306\u800c\u8fc7\u3002\u4f46\u662f\uff0c\u7ec6\u7ec6\u8d70\u6765\uff0c\u53d1\u73b0\u5176\u5236\u4f5c\u6d41\u7a0b\u7684\u7cbe\u7ec6\u3001\u7e41\u6742\uff0c\u5f97\u5230\u7684\u74f7\u5668\u8d28\u91cf\u4e0a\u4e58\u3001\u4ef7\u503c\u9ad8\u6602\uff0c\u5185\u542b\u5927\u5bb6\u5bf9\u5320\u5fc3\u7684\u8ffd\u6c42\u3002</p> <p>\u665a\u4e0a\u56de\u6765\uff0c\u53c2\u4e0e\u4e86\u5927\u8868\u54e5\u7684\u5a5a\u793c\u3002\u4e0d\u77e5\u4e3a\u4f55\uff0c\u6211\u4e00\u8fb9\u4e3a\u4ed6\u4eec\u611f\u5230\u5f88\u5f00\u5fc3\uff0c\u4e00\u8fb9\u611f\u53d7\u5230\u65f6\u5149\u98de\u901d\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5728\u5f80\u524d\u8d70\u3002\u6211\u5bf9\u672a\u6765\u6709\u671f\u5f85\uff0c\u4e5f\u6709\u7126\u8651\u3002</p>"},{"location":"blog/Travel/5th_05_24/#53-55","title":"5.3-5.5","text":"<p>\u56de\u5230\u6e29\u5dde\uff0c\u9664\u4e86\u4e45\u8fdd\u7684\u6d77\u9c9c\u4e0d\u65ad\u6ee1\u8db3\u6211\u81ea\u5df1\u4e4b\u5916\uff0c\u6211\u8fd8\u5c06\u81ea\u5df1\u7684\u751f\u6d3b\u6162\u4e86\u4e0b\u6765\u3002\u6211\u548c\u5bb6\u91cc\u4eba\u90fd\u76f8\u5904\u4e86\u4e00\u4e0b\uff0c\u6211\u660e\u767d\u4e4b\u540e\u53ef\u80fd\u6ca1\u6709\u5f88\u591a\u7684\u65f6\u95f4\u966a\u4f34\u5bb6\u4eba\u3002</p> <p>\u6211\u5237\u4e86\u4e00\u4e0b\u8001\u53cb\u8bb0\uff0c\u5176\u5b9e\u8fd9\u4e2a\u662f\u53ef\u4ee5\u4e0a\u763e\u7684\uff01\u770b\u5267\u4e0a\u763e\u7684\u673a\u5236\uff0c\u6e90\u81ea\u4e8e\u5267\u60c5\u5bf9\u4eba\u7684\u5174\u8da3\u7684\u4e0d\u65ad\u6311\u9017\uff0c\u4eba\u770b\u5267\u65f6\u80fd\u591f\u6709\u7684\u677e\u5f1b\u611f\u548c\u5fd8\u6211\u611f\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u4e1c\u897f\u662f\u53ef\u4ee5\u8c03\u63a7\u7684\uff0c\u56e0\u4e3a\u5f88\u591a\u79ef\u6781\u7684\u4e8b\u60c5\uff0c\u90fd\u5728\u52aa\u529b\u4e2d\uff0c\u53d8\u5f97\u4e0a\u763e\u3002</p> <p>\u9ebb\u5c06\u5f53\u7136\u4e5f\u662f\u4e00\u6b21\u805a\u4f1a\u7684\u597d\u65f6\u673a\u3002\u5927\u5bb6\u90fd\u80fd\u591f\u804a\u804a\u5404\u81ea\u7684\u751f\u6d3b\uff0c\u4e0d\u540c\u7684\u4eba\u4e0d\u540c\u7684\u5730\u65b9\uff0c\u6709\u7740\u76f8\u4f3c\u7684\u60c5\u611f\u3002</p> <p>\u6700\u91cd\u8981\u7684\u662f\uff0c\u6211\u80fd\u591f\u4e3a\u6211\u7684\u5bb6\u5ead\u628a\u628a\u8109\uff0c\u770b\u770b\u6709\u6ca1\u6709\u4ec0\u4e48\u6bdb\u75c5\uff0c\u63a5\u4e0b\u6765\u79bb\u5bb6\u540e\uff0c\u6211\u662f\u4e0d\u662f\u8981\u505a\u4e00\u4e9b\u8c03\u6574\u3002\u6700\u91cd\u8981\u7684\u662f\u6211\u548c\u7238\u5988\u7684\u8ddd\u79bb\u53d8\u5f97\u66f4\u52a0\u9065\u8fdc\uff0c\u6211\u53d1\u73b0\u4e4b\u524d\u65e5\u5e38\u7684\u4e2d\u9910\u5e76\u4e0d\u80fd\u5f88\u597d\u5730\u89e3\u51b3\u95ee\u9898\u3002\u6211\u9700\u8981\u591a\u53d1\u4e00\u4e9b\u7167\u7247\uff0c\u5173\u4e8e\u6211\u7684\u751f\u6d3b\uff0c\u6211\u7684\u5468\u672b\uff0c\u8ba9\u4ed6\u4eec\u591a\u770b\u770b\u6211\u5230\u5e95\u662f\u600e\u4e48\u505a\u7684\u3002</p> <p>\u5047\u671f\u7ed3\u5c3e\u6211\u7adf\u7136\u80fd\u591f\u8bfb\u5230\u4e00\u53e5\u597d\u6587\uff1a \u4e09\u8054\u751f\u6d3b\u5468\u520a<pre><code>\u4e0d\u8981\u8bd5\u56fe\u5bfb\u627e\u4e00\u79cd\u201c\u4e0d\u7126\u8651\u201d\u7684\u72b6\u6001\uff0c\u56e0\u4e3a\u7126\u8651\u4e0e\u4eba\u7684\u9009\u62e9\u548c\u751f\u5b58\u76f8\u4f34\u968f\uff0c\u4e0d\u5982\u5b66\u4f1a\u4e00\u4e9b\u5c0f\u7684\u6280\u5de7\uff0c\u8ba9\u81ea\u5df1\u80fd\u548c\u7126\u8651\u5171\u5904\u3002\n</code></pre></p> <p>\u5b89\u6170\u4e86\u66fe\u7ecf\u52aa\u529b\u7684\u81ea\u5df1\uff0c\u6e05\u6670\u4e86\u5bf9\u672a\u6765\u7684\u52aa\u529b\u3002</p> <p>\u4ee5\u524d\u63a2\u7d22\u7684\u5404\u79cd\u6709\u76ca\u7684\u65b9\u5f0f\uff0c\u90fd\u80fd\u591f\u548c\u7126\u8651\u4e32\u8054\u8d77\u6765\uff0c\u9a7e\u9a6d\u7126\u8651\uff0c\u4e3a\u6211\u6240\u7528\u3002</p> <p>\u611f\u89c9\u81ea\u5df1\u7684\u5f88\u591a\u53d1\u8a00\u90fd\u6709\u529f\u5229\u5b9e\u7528\u4e3b\u4e49\u7684\u8272\u5f69\uff0c\u65e5\u6e10\u957f\u5927\u7684\u81ea\u5df1\u5f80\u5f80\u90fd\u662f\u5bf9\u7406\u60f3\u5931\u53bb\u8010\u5fc3\u548c\u4fe1\u5fc3\uff0c\u8d70\u4e00\u6b65\u770b\u4e00\u6b65\uff0c\u800c\u603b\u662f\u8981\u56de\u5934\u770b\u770b\uff0c\u81ea\u5df1\u4e3a\u4ec0\u4e48\u51fa\u53d1\u3002</p> <p>\u6211\u89c9\u5f97\u5bf9\u6211\u6765\u8bf4\uff0c\u6211\u9700\u8981\u4e0d\u65ad\u6253\u5f00\u81ea\u5df1\u3002\u6211\u80fd\u591f\u653e\u4e0b\u5f88\u591a\u4ee5\u524d\u6240\u8ba4\u4e3a\u7684\u7981\u5fcc\uff0c\u53bb\u505a\u5f88\u591a\u5b9e\u9645\u4e0a\u90fd\u80fd\u591f\u505a\u7684\u4e8b\u60c5\u3002</p> <p>\u5176\u5b9e\u5f88\u591a\u4e1c\u897f\u90fd\u662f\u4f1a\u4e0a\u763e\u7684\u3002</p> <p>\u5b66\u4f1a\u628a\u4e0d\u65ad\u7684\u4e0a\u763e\u53d8\u6210\u81ea\u5df1\u6700\u559c\u6b22\u7684\u6a21\u6837\u3002</p>"},{"location":"courses/","title":"Content","text":"<p>The following contains some notes of courses at ZJU.</p>"},{"location":"courses/#introduction-to-robotics","title":"Introduction to Robotics","text":"<p>Completed.</p>"},{"location":"courses/#numerical-analysis","title":"Numerical Analysis","text":"<p>To be continued...</p>"},{"location":"courses/#c-plus-plus","title":"C Plus Plus","text":"<p>To be continued...</p>"},{"location":"courses/#modern-control-theory","title":"Modern Control Theory","text":"<p>To be continued...</p>"},{"location":"courses/#sensing-detection","title":"Sensing &amp; Detection","text":"<p>Maybe will only present the midterm exam.</p>"},{"location":"courses/Modern_Control_Theory/MCT/","title":"Modern Control Theory","text":"<p>I show the outline of the course for the coming exam.</p> <p></p>"},{"location":"courses/Numerical_Analysis/NA/","title":"Numerical Analysis","text":""},{"location":"courses/Numerical_Analysis/NA/#numerical-analysis","title":"Numerical Analysis","text":""},{"location":"courses/Numerical_Analysis/NA/#basic-ideas-for-solving-equation","title":"Basic ideas for Solving Equation","text":"<p>To find the solution of an equation, we hope to have an iteration method which takes good advantage of Computer resources like</p> \\[ \\begin{equation}  \\pmb{x}^{k} = f(\\pmb{x}^{k-1}) \\label{eq: iterative eq}  \\end{equation} \\] <p>for \\(k = 1, 2, \\cdots n\\). We use \\(\\pmb{x}\\) instead of \\(x\\) because the above iteration method also applies to solving linear system.</p> <p>Hopefully, if the above equation converges, that is, for \\(k \\rightarrow \\infty\\), \\(\\pmb{x}^{k-1}\\rightarrow \\pmb{x}^*\\), \\(\\pmb{x}^{k}\\rightarrow \\pmb{x}^*\\), and the equation becomes</p> \\[ \\pmb{x}^* = f(\\pmb{x}^*) \\] <p>where \\(\\pmb{x^*}\\) is the sulution of the equation to be solved.</p> <p>If the above thought gets right, then we can consider the converging speed of the iterative process, which makes great sense in practical applications. That is, in a given definition of distence,</p> \\[ \\frac{\\|\\pmb{x}^{k+1} - \\pmb{x}^*\\|}{\\|\\pmb{x}^{k}-\\pmb{x}^*\\|^\\alpha}  \\] <p>to be small as much as possible for each \\(k\\).</p>"},{"location":"courses/Numerical_Analysis/NA/#preliminary-errors","title":"Preliminary: Errors","text":"<p>If a real number \\(x\\) is denoted as \\(0.d_1d_2d_3\\cdots \\times 10^{n}\\), then</p> <ul> <li>Truncation\uff08\u622a\u65ad\uff09 Error</li> </ul> <p>is induced when </p> \\[ \\hat{x}=0.d_1d_2d_3\\cdots d_k \\times 10^{n}  \\] <p>for some definite \\(k&lt;\\infty\\)</p> <ul> <li>Roundoff\uff08\u820d\u5165\uff09 Error</li> </ul> <p>is induced when </p> \\[ \\hat{x}=0. \\delta_1 \\delta_2 \\delta_3 \\cdots \\delta_k \\times 10^{n}  \\] <p>for some definite \\(k&lt;\\infty\\) </p> <p>where \\(\\delta_k &gt;d_k\\) if \\(d_{k+1}&gt;=5\\).</p>"},{"location":"courses/Numerical_Analysis/NA/#t-significant-digits","title":"t significant digits","text":"<p>The number \\(p^*\\) is said to approximate p to \\(t\\) significant digits(or figures) if \\(t\\) is the largest nonnegative integer for which the relative error </p> \\[ e = \\frac{\\Delta p}{p}=\\frac{\\|p-p^*\\|}{\\|p\\|}&lt;5\\times 10^{-t}  \\] <p>where \\(p^*\\) is the approximate number of the exact number \\(p\\).</p> <ul> <li>for Chopping:</li> </ul> \\[  \\begin{align*} e &amp;= \\left|\\frac{0.d_{k+1}d_{k+2}\\cdots}{0.d_1d_2\\cdots}\\right| \\times 10^{-k} \\\\ &amp;\\leq \\frac{1}{0.1} \\times 10^{-k} \\quad \\text{\"=\" for } d_{k+1}d_{k+2}\\cdots\\rightarrow\\overline{9}\\text{ and }d_{1}d_{2}\\cdots\\rightarrow 0 \\\\ &amp;=10^{-k+1}  \\end{align*}  \\] <ul> <li>for rounding:</li> </ul> \\[ \\begin{align*} e &amp;\\leq \\frac{0.5}{0.1} \\times 10^{-k} \\quad \\text{\"=\" for } d_{k+1}d_{k+2}\\cdots\\rightarrow 5\\overline{0}\\text{ and }d_{1}d_{2}\\cdots\\rightarrow 0 \\\\  &amp;=0.5\\times 10^{-k+1} \\end{align*}  \\]"},{"location":"courses/Numerical_Analysis/NA/#solutions-of-equations-in-one-variables","title":"Solutions of Equations in One Variables","text":""},{"location":"courses/Numerical_Analysis/NA/#the-besection-method","title":"the Besection Method\uff08\u4e8c\u5206\u6cd5\uff09","text":"<p>This method is quite intuitive. By choosing two end points \\(a, b\\), we get another point (Mid-point here)</p> \\[ p = a+\\frac{b-a}{2} \\] <p>Then update \\(a, b\\) by evaluating whether \\(f(p)&gt;0\\) or not to narrow down the interval.</p> <p>What is interesting is the stopping procedure. Readers can see the following question if interested.</p> <p>When we calculate the new point \\(p\\) based on \\(a, b\\), we need to judge whether \\(p\\) is an appropriate answer. Apart from \\(f(p)=0\\), which condition do you think is the best?</p> <ol> <li>\\((b-a)/{|\\min{(a, b)}|}&lt;\\epsilon\\)</li> <li>\\(|p-p_{prev}|=(b-a)/2 &lt; \\epsilon\\)</li> <li>\\(f(p)&lt;\\epsilon\\)</li> </ol> Choose an answerAnwser by Maplefaith <ul> <li>1</li> <li>2</li> <li>3</li> </ul> <p>Choose 1, which is close to relative error, currently the best.</p> <p>2: consider \\(\\{p_n\\}=\\sum\\limits_{i=1}^{n}\\frac{1}{k}\\).</p> <p>3: easy to see.</p>"},{"location":"courses/Numerical_Analysis/NA/#Fixed-Point-Iteration","title":"Fixed-Point Iteration\uff08\u4e0d\u52a8\u70b9\u6cd5\uff09","text":"<p>As we said previously in Basic ideas for solving equation, we hope to find an iterative relation such that the converging point \\(x^*\\) is exactly what we want, which in this case, means that </p> \\[ f(x^*) = 0 \\] <p>So intuitively, we ask: Whether can we derive a relation from </p> \\[ \\begin{equation} f(x) = 0 \\label{zero-equation} \\end{equation} \\] <p>to </p> \\[ x = g(x) \\] <p>for iterative method?</p> <p>The answer is, of course, YES!</p> <p>One of the easist way to transform is adding \\(x\\) to both sides of equation \\(\\ref{zero-equation}\\), but in most cases this does not work. Because we rely on \\(f(x)\\) ifself for the convergence! </p> <p>Thus, it is necessary to find the condition for \\(x = g(x)\\) to converge. The following theorem <p></p> gives a Sufficient condition.</p> <p>\u4e0d\u52a8\u70b9\u5b58\u5728\u5b9a\u7406 | Fixed-Point Theorom</p> <p>Let \\(g \\in C[a, b]\\) be such that \\(g(x) \\in [a, b]\\), for all \\(x\\) in \\([a, b]\\). Suppose, in addition, that \\(g'\\) exists on \\((a, b)\\) and that a constant \\(0 &lt; k &lt; 1\\) exists with</p> \\[ |g'(x)|\\leq k \\quad \\forall x \\in (a, b) \\] <p>Then for any initial number \\(p_0 \\in [a, b]\\), the sequence \\(\\{p_n\\}_{n=0}^{\\infty}\\) defined by </p> \\[ p_n = g( p_{n\u22121}) \\quad n \\geq 1 \\] <p>converges to the unique fixed point \\(p \\in [a, b]\\).</p> <p>Proving it is easily.</p> HintsProof <ul> <li>using the differential mean value theorem.</li> </ul> <p>\\(\\forall n \\geq 1, \\exists \\zeta_n \\in (p_{n-1}, p) \\subset (a, b)\\), we have</p> \\[ |p_n-p| = |g(p_{n-1}) - g(p)| = g'(\\zeta_n)|p_{n-1}-p|\\leq k|p_{n-1}-p| \\] <p>by induction, we have</p> \\[ |p_n-p|\\leq k^{n}|p_0-p| \\] <p>Let \\(n \\rightarrow \\infty\\), \\(|p_n-p| \\rightarrow 0\\), that is, \\(p_n\\) converges to \\(p\\). </p> <p>What we use in the proof will benefit us in identifying the speed of converging process.</p>"},{"location":"courses/Numerical_Analysis/NA/#newtons-method","title":"Newton's Method\uff08\u725b\u987f\u6cd5\uff09","text":"<p>This method is also a fixed-point method. There are two perspectives to get the inspirations.</p> HintsVersion 1Version 2 <ul> <li>version1: shrink the derivative of the iterative function \\(g(x)\\).</li> <li>version2: using Taylor's expansion.</li> </ul> <p>We can know that given a random function \\(f(x)\\), it may not be convergent to some point \\(x^*\\) for \\(x^{k} = f(x^{k-1}) + x^{k-1}\\) in a given interval. So the queation is, can we formulate a function \\(g(x)\\) such that \\(x^{k} = g(x^{k-1})\\) is convergent?</p> <p>The answer is, again, YES!</p> <p>The following content tells us we can formulate \\(g(x)= x - f(x)/(f'(x))\\) such that \\(g'(x) &lt; 1\\) in a given interval.</p> <p>Readers can easily see that </p> \\[ \\begin{align*} g'(x) &amp;= 1 - \\frac{f'^2(x)-f''(x)f(x)}{f'^2(x)}\\\\ &amp;=\\frac{f''(x)f(x)}{f'^2(x)} \\end{align*} \\] <p>if we add some constrictions, it can be easy to make \\(g'(x)&lt;1\\).</p> <p>Here we make use of the Taylor's expansion(or the derivatives) of the goal function. </p> <p>Suppose that \\(f \\in C^2[a, b]\\), Let \\(x_0 \\in [a, b]\\) be an approximation to \\(x^*\\) such that \\(f(x^*) \\neq 0\\) and \\(|x_0-x^*|\\) is \"small\". Consider the first Taylor polynomial for \\(f(x)\\) expanded at \\(x_0\\):</p> \\[  f(x) = f(x_0) + (x-x_0)f'(x_0) + \\frac{(x-x_0)^2}{2}f''(\\zeta). \\] <p>If we let \\(x = x^*\\), and according to \\(f(x^*)=0\\), we get </p> \\[ 0 = f(x_0) + (x^*-x_0)f'(x_0) + \\frac{(x^*-x_0)^2}{2}f''(\\zeta) \\] <p>neglecting the square item, we get </p> \\[ 0 \\approx f(x_0) + (x^*-x_0)f'(x_0) \\] <p>to represent \\(x^*\\), we get</p> \\[ x^* = x_0 - \\frac{f(x_0)}{f'(x_0)} \\] <p>Then we can define the iterative relation as</p> \\[  x_n = x_{n-1} - \\frac{f(x_{n-1})}{f'(x_{n-1})}  \\] <p>The following statement guarrantees the convergence of the above iterative method.</p> <p>\u725b\u987f\u6cd5\u6536\u655b\u6761\u4ef6 | conditions for convergence of Newton's method</p> <p>Let \\(f \\in C^2[a, b]\\). If \\(p \\in (a, b)\\) is such that \\(f (p) = 0\\) and \\(f'( p) \\neq 0\\), then there exists a \\(\\delta &gt; 0\\) such that Newton\u2019s method generates a sequence \\(\\{p_n\\}_{n=1}^{\\infty}\\) converging to \\(p\\) for any initial approximation \\(p_0 \\in [p \u2212 \\delta, p + \\delta]\\).</p> <p>Prove it.</p> HintsProof <ul> <li>make use of the condition \\(f(p) = 0\\) and \\(f'(p)\\neq 0\\)</li> </ul> <p>for \\(x \\in (a, b)\\), we aim to find a narrower interval \\((x^*-\\delta, x^*+\\delta)\\) to have \\(g(x)\\) map into itself. That is, </p> \\[ g(x)\\leq k, \\forall k\\in (0,1) \\] <p>Firstly, \\(f'(p)\\neq 0\\) implies that \\(\\exists \\delta_1 &gt;0\\) such that \\(f'(x)\\neq 0, \\forall x \\in [x^* - \\delta, x^*+\\delta]\\subset [a, b]\\).</p> <p>THus, we have</p> \\[ g'(x) = \\frac{f(x)f''(x)}{(f'^2(x))} \\] <p>capable of dividing non-zero numbers.</p> <p>Since \\(f\\in C^2[a,b]\\), we have \\(g' \\in C^1[x^*-\\delta_1, x^*+\\delta_1]\\) for the exact solution \\(x^*\\), we have \\(f(x^*)=0\\), so </p> \\[ g'(x^*) = 0 \\] <p>which implies that \\(\\exists 0&lt;\\delta &lt; \\delta_1\\), such that </p> \\[ g'(x)\\leq k, \\forall k \\in [x^*-delta, x^*+\\delta] \\] <p>By differential Mean Value Theorem, for \\(x \\in [x^*-delta, x^*+\\delta], \\exists \\zeta \\in [x, x^*]\\) such that </p> \\[ |g(x)-g(x^*)|=g'(\\zeta)|x - x^*|\\leq k|x-x^*|&lt;|x-x^*| \\] <p>which means that \\(g\\) maps into itself. By Fixed-Point Theorom, the sequence defined by Newton's method converges. </p>"},{"location":"courses/Numerical_Analysis/NA/#secant-method","title":"Secant Method","text":"<p>It may not be easy to find derivarive of function \\(f\\), so we can use difference instead. That is, we have to store two adjacent points for calculating differnce</p> \\[ f'(x^{k}) \\approx \\frac{f(x^{k}) - f(x^{k-1})}{x^{k}-x^{k-1}} \\] <p>generate \\(p_{k+1}\\) using the above approximation and iterate.</p>"},{"location":"courses/Numerical_Analysis/NA/#order-of-convergence","title":"Order of Convergence","text":"<p>So how to identify the speed of convergence? The following definition gives a glimpse.</p> <p>Suppose \\(\\{p_n\\}_{n=1}^{\\infty}\\) is a sequence that converges to \\(p\\), with \\(p_n \\neq p (\\forall n)\\). If positive constants \\(\\lambda\\) and \\(\\alpha\\) exist with</p> \\[ \\lim_{n\\rightarrow \\infty}{\\frac{|p_{n+1}-p|}{|p_n-p|^{\\alpha}}}=\\lambda \\] <p>then \\(\\{p_n\\}_{n=0}^{\\infty}\\) converges to \\(p\\) of order \\(\\alpha\\), with asymptotic error constant \\(\\lambda\\).</p> <ul> <li>(i) If \\(\\alpha=1 (\\lambda&lt;1)\\), the sequence is linearly convergent.</li> <li>(ii) If \\(\\alpha=2\\), the sequence is quadratically convergent.</li> </ul> <p>The following theorem gives a sufficient condition for linear convergence.</p> <p>\u7ebf\u6027\u6536\u655b\u7684\u5145\u5206\u6761\u4ef6 | sufficient condition of linear convergence</p> <p>Let \\(g \\in C[a, b]\\) be such that \\(g(x) \\in [a, b], \\forall x \\in [a, b]\\). Suppose, in addition, that \\(g\\) is continuous on \\((a, b)\\) and a positive constant \\(k &lt; 1\\) exists with</p> \\[ |g'(x)|\\leq k \\quad \\forall x \\in (a, b) \\] <p>If \\(g'(p) \\neq 0\\), then for any number \\(p_0=p\\) in \\([a, b]\\), the sequence </p> \\[ p_n=g(p_{n-1}) \\quad \\forall n \\geq 1 \\] <p>converges only linearly to the unique fixed point \\(p\\) in \\([a, b]\\).</p> <p>Prove it.</p>"},{"location":"courses/Numerical_Analysis/NA/#multiple-roots","title":"multiple roots","text":"<p>We see that the speed of convergence is limited by multiple roots.</p>"},{"location":"courses/Numerical_Analysis/NA/#accelerating-convergence","title":"Accelerating convergence","text":""},{"location":"courses/Numerical_Analysis/NA/#aitkens-delta2-method","title":"Aitken's \\(\\Delta^2\\) Method","text":"<p>Suppose \\(\\{p_n\\}_{n=0}^{\\infty}\\) is a linearly convergent sequence with limit \\(p\\). To motivate the construction of a sequence \\(\\{\\hat{p}_n\\}_{n=1}^{\\infty}\\) that converges more rapidly to \\(p\\) than does \\(\\{p_n\\}_{n=0}^{\\infty}\\), let us first assume that the signs of \\(p_n-p\\), \\(p_{n+1}-p\\) and \\(p_{n+2}-p\\) agree and that \\(n\\) is sufficiently large that </p> \\[ \\frac{p_{n+1}-p}{p_n-p} \\approx \\frac{p_{n+2}-p}{p_{n+1}-p} \\] <p>Then solving for \\(p\\) gives</p> \\[ p \\approx \\frac{p_{n+2}p_n-p_{n+1}^2}{p_{n+2}-2p_{n+1}+p_n} \\] <p>And to get \\(p_n\\) out gives</p> \\[ \\begin{align*} p &amp;\\approx p_n - \\frac{(p_{n+1}-p_n)^2}{p_{n+2} - 2p_{n+1} + p_n}\\\\ \\Rightarrow \\hat{p}_n &amp;= p_n - \\frac{(\\Delta p_n)^2}{\\Delta p_{n+1}-\\Delta p_{n}} \\quad \\text{(denote $\\Delta p_n = p_{n+1} - p_n$)}\\\\ &amp;= p_n - \\frac{(\\Delta p_n)^2}{\\Delta^2 P_{n}}  \\end{align*}  \\]"},{"location":"courses/Numerical_Analysis/NA/#steffensens-method","title":"Steffensen's Method","text":"<p>The following thought is based on that the generated sequence \\(\\hat{p}\\) is a better approximation to true \\(p^*\\). We make use of the constructed sequence \\(\\{\\hat{p}_n\\}\\) to update the original sequence \\(\\{p_n\\}\\). That is, after generating a new \\(\\hat{p}\\), we can update \\(p_0 \\leftarrow p\\).</p>"},{"location":"courses/Numerical_Analysis/NA/#direct-methods-for-solving-linear-systems","title":"Direct Methods for Solving Linear Systems","text":"<p>We focus on solving linear system </p> \\[ A\\vec{x} = \\vec{b} \\]"},{"location":"courses/Numerical_Analysis/NA/#gasussion-elimination","title":"Gasussion Elimination","text":"<p>Reduce A into an upper-triangular matrix, and then solve for the unknowns by a backward-substitution process</p>"},{"location":"courses/Numerical_Analysis/NA/#pivoting-stratages","title":"Pivoting Stratages","text":"<p>This part is to reduce the error caused by rounding/Truncation error.</p> <p>We can show that the pivoting element is of great significance.</p> Partial PivotingScaled Partial PivotingComplete Pivoting <p>(also known for not changing the columns)</p> <p>Determine the smallest \\(p\\geq k\\) (in the same column of \\(a^{(k)}_{kk}\\))such that </p> \\[ |a_{ok}^{(k)}| = \\max_{k\\leq i \\leq n}{|a_{ik}^{(k)}|} \\] <p>and perform \\((E_k) \\leftrightarrow (E_p)\\).</p> <p>For row \\(i\\), let</p> \\[ s_i = \\max_{1\\leq j\\leq n}{|a_{ij}|} \\] <p>(if \\(\\exists i, s.t. s_i=0\\), then the system has no unique root. So we assume \\(\\forall i, s_i&gt;0\\))</p> <p>For each procedure of executing \\(E_k \\leftarrow E_k - m_{k,i}E_i\\) for \\(k=i+1, \\cdots, n\\), where \\(m_{k, i} = a_{ki}/{a_{ii}}\\). let </p> \\[ p = \\arg \\max_{i\\leq k \\leq n}{\\frac{|a_{ki}|}{s_k}} \\] <p>perform \\((E_i)\\leftrightarrow(E_p)\\)</p> <p>Incorporate the interchange of both rows and columns.</p>"},{"location":"courses/Numerical_Analysis/NA/#time-cost","title":"Time Cost","text":"<p>As we all know the time expense for Gaussion elimination is</p> \\[ O(n^3) \\]"},{"location":"courses/Numerical_Analysis/NA/#lu-matrix-factorization","title":"LU Matrix Factorization","text":"<p>The idea is encouraged by Gaussion Elimination. See that a matrix \\(A\\) can be transformed into an upper-trianglar matrix \\(U\\) by primary row operations:</p> \\[ \\begin{equation}  U = M_{n-1}\\cdots M_2M_1A  \\label{eq: LU} \\end{equation}  \\] <p>where \\(M_k (k=1,2,\\cdots n-1)\\) denotes a series of row operations. There are two perspetives.</p> Version 1Version 2 <p>\\(M_k (k=1, \\cdots, n-1)\\) can be interpreted that the \\(k+1\\) row has to make its column \\(1\\) to \\(k\\) to be \\(0\\). That is,</p> \\[ E_{k+1} \\leftarrow E_{k+1} - \\sum_{j=1}^{k} m_{k+1, j}E_j \\] <p>\\(M_k (k=1,\\cdots, n-1)\\) can be defined in another way as </p> \\[ E_j \\leftarrow E_j - \\sum\\limits_{k=j}^{n}m_{j,k}E_k \\quad \\text{for } j=k+1, \\cdots n \\] <p>which is also a lower-triangular matrix. To be proved by readers. </p> <p>And we can see \\(M_k\\) formed through the above two interpretations are the same.</p> <p>If we denote \\(L_k = M_k^{-1}\\), then apply \\(L = L_1L_2\\cdots L_{n-1}\\) left to both sides of the equation \\(\\ref{eq: LU}\\), then</p> \\[ LU = L_1L_2\\cdots L_{n-1} \\cdot M_{n-1}\\cdots M_2M_1A = A \\] <p>We know that matrix \\(L_k\\) and \\(M_k\\) are lower-triangular matrix(explaned by definition, to be proved by readers), so the product of matrix L is alao a lower-triangular matrix.</p> <p>So with the triangular matrix, it can be much quicker to solve the solution. See that</p> \\[  \\begin{align*} A\\vec{x} &amp;= \\vec{b} \\\\ LU\\vec{x} &amp;= \\vec{b} \\end{align*}  \\] <p>First solve \\(L \\vec{y} = \\vec{b}\\), then solve \\(U \\vec{x} = \\vec{y}\\).</p>"},{"location":"courses/Numerical_Analysis/NA/#time-cost_1","title":"time cost","text":"<p>Eliminate \\(0.5n^2\\) elements, it needs time \\(O(0.5n^3)\\).</p> <p>Solving \\(y\\) and \\(x\\), it needs time \\(O(2n^2)\\).</p>"},{"location":"courses/Numerical_Analysis/NA/#iterative-techniques-in-matrix-algebra","title":"Iterative Techniques in Matrix Algebra","text":"<p>This section, we introduce the iterative thoughts from Fixed-Point Iteration\uff08\u4e0d\u52a8\u70b9\u6cd5\uff09 to solve a linear system.</p> <p>We aim to find a iterative equation like equation \\(\\ref{eq: iterative eq}\\). To be more specific, a linear iterative equation like</p> \\[ \\pmb{x}^{k} = T \\pmb{x}^{k-1} + \\pmb{c} \\] <p>and its corresponding convergent relation is</p> \\[ \\pmb{x}= T \\pmb{x} + \\pmb{c} \\]"},{"location":"courses/Numerical_Analysis/NA/#jacobis-method","title":"Jacobi's Method  <p>Here we denote \\(L\\) and \\(U\\) to be the lower-triangular and upper-triangular matrix of matrix \\(A\\) without its diagonal elements respectively. (different from \\(LU\\) factorization!) And then we denote \\(D\\) to be the diagonal elements of the matrix of \\(A\\). That is, </p> \\[ A = D - L -U \\] <p>Then</p> \\[  \\begin{align*} A\\pmb{x} &amp;= \\pmb{b} \\\\ (D-L-U)\\pmb{x} &amp;= \\pmb{b} \\\\ D\\pmb{x} &amp;= (L+U)\\pmb{x} + \\pmb{b} \\\\ \\pmb{x} &amp;= D^{-1}(L+U)\\pmb{x} + D^{-1}\\pmb{b}  \\end{align*}  \\] <p>which gives matrix form of the Jacobi iterative technique</p> \\[ \\pmb{x}^{k} = D^{-1}(L+U)\\pmb{x}^{k-1} + D^{-1}\\pmb{b} \\]","text":""},{"location":"courses/Numerical_Analysis/NA/#the-gauss-seidel-method","title":"The Gauss-Seidel Method <p>This method sees that a little slowness in Jacobi's Method. That is, for each itearion period(\\(\\pmb{x}^{k} \\leftarrow \\pmb{x}^{k-1}\\)), it makes use of the generated \\(\\pmb{x}^{k}_{i}\\) in the \\(i\\)th row of \\(\\pmb{x}^{k}\\) and use it to update the coressponding element in \\(\\pmb{x}^{k-1}\\).</p> <p>In matrix form, we have</p> \\[ D\\pmb{x}^{k} = U\\pmb{x}^{k-1} + L\\pmb{x}^{k}+ \\pmb{b} \\] <p>(to be proved by readers)</p> <p>then</p> \\[ \\pmb{x}^{k} = (D-L)^{-1}U\\pmb{x}^{k-1} + (D-L)^{-1}\\pmb{b} \\]","text":""},{"location":"courses/Numerical_Analysis/NA/#approximating-eigenvalues","title":"Approximating Eigenvalues","text":""},{"location":"courses/Numerical_Analysis/NA/#interpolation-and-polynomial-approximation","title":"Interpolation and Polynomial Approximation","text":"<p>Inspired by \u52a0\u6743\u5e73\u5747.</p> <p>There exists and only exists a \\(n\\)th Lagrange interpolating polynomial (\u62c9\u683c\u6717\u65e5\u79ef\u51fd\u6570) </p> \\[  L_n(x) = \\sum_{i=0}^{n}l_i(x)y_i = \\begin{bmatrix} l_0(x) &amp; l_1(x) &amp;l_2(x) &amp; \\cdots &amp; l_n(x)  \\end{bmatrix} \\begin{bmatrix} y_0 \\\\ y_1 \\\\ \\vdots \\\\ y_n  \\end{bmatrix} = \\Phi_n(x)\\vec{y}  \\] <p>such that for each pair of given points \\((x_i, y_i)\\), \\(i = 0, 1,2,\\cdots n\\), we have \\(y_i = L_n(x_i)\\).</p> <p>Here we can consider \\(l_i(x)\\) as a base of a linear space \\(\\mathcal{P}_n(x)\\), and it can be displayed by natural base \\(1, x, x^2, \\cdots x^n\\). To be more specific,</p> \\[ l_i(x) = \\prod_{j=0 \\atop j \\neq i }^{n}\\frac{(x - x_i)}{(x_i-x_j)} \\quad i=0,1,\\cdots n  \\] <p>readers can prove the above \\(n+1\\) polynomials are linearly irrelevant.</p> <p>In fact, if we assume \\(P_n(x) = \\sum\\limits_{i=0}^{n}a_ix^i\\)(natural base), and to get the parameters \\(\\{a_i\\}\\) such that \\(P_n(x_i) = y_i\\), we have to solve the following linear system</p> \\[ \\begin{bmatrix} 1 &amp; x_0 &amp; x_0^2 &amp;\\cdots &amp; x_0^n \\\\  1 &amp; x_1 &amp; x_1^2 &amp;\\cdots &amp; x_1^n \\\\  \\vdots &amp; \\vdots &amp; \\vdots &amp; &amp;\\vdots \\\\ 1 &amp; x_n &amp; x_n^2 &amp;\\cdots &amp; x_n^n  \\end{bmatrix} \\begin{bmatrix}  a_0 \\\\ a_1 \\\\ \\vdots \\\\ a_n  \\end{bmatrix}=  \\begin{bmatrix} y_0 \\\\ y_1 \\\\ \\vdots \\\\ y_n  \\end{bmatrix}  \\] <p>which is a little tedious.</p>"},{"location":"courses/Sensing%26Detection/Midterm/","title":"Midterm Exam","text":""},{"location":"courses/Sensing%26Detection/Midterm/#_1","title":"\u7b80\u7b54\u9898","text":""},{"location":"courses/Sensing%26Detection/Midterm/#_2","title":"\u201c\u5dee\u52a8\u201d\u548c\u201c\u53c2\u6bd4\u201d\u8bbe\u8ba1\u65b9\u6cd5","text":"\u7b80\u8981\u6bd4\u8f83\u4e00\u4e0b\u201c\u5dee\u52a8\u5f0f\u201d\u548c\u201c\u53c2\u6bd4\u5f0f\u201d\u4e24\u79cd\u68c0\u6d4b\u4eea\u8868\u8bbe\u8ba1\u65b9\u6cd5\u7684\u5f02\u540c\u70b9\u3002  <p>\u5f02\uff1a</p> <ul> <li>\u5dee\u52a8\u5f0f\u662f\u91c7\u7528\u4e24\u4e2a\u8f6c\u6362\u5143\u4ef6\u540c\u65f6\u611f\u53d7\u654f\u611f\u5143\u4ef6\u7684\u8f93\u51fa\u91cf\uff0c\u5e76\u628a\u5b83\u8f6c\u6362\u6210\u4e24\u4e2a\u6027\u8d28\u76f8\u540c\uff0c\u4f46\u6cbf\u76f8\u53cd\u65b9\u5411\u53d8\u5316\u7684\u7269\u7406\u91cf\u3002\u8be5\u65b9\u6cd5\u80fd\u591f\u4f7f\u5f97\u6709\u6548\u8f93\u51fa\u4fe1\u53f7\u63d0\u9ad8\u4e00\u500d\uff0c\u4fe1\u566a\u6bd4\u5f97\u5230\u6539\u5584\uff0c\u975e\u7ebf\u6027\u8bef\u5dee\u51cf\u5c0f\uff1b\u6613\u4e8e\u5b9e\u73b0\u521d\u59cb\u72b6\u6001\uff08\u201c\u96f6\u201d\u8f93\u5165\uff09\u7684\u96f6\u8f93\u51fa\uff0c\u80fd\u6d88\u9664\u90e8\u5206\u73af\u5883\u56e0\u7d20\u7684\u5f71\u54cd\u3002</li> <li>\u53c2\u6bd4\u5f0f\u662f\u91c7\u7528\u4e24\u4e2a\u6027\u80fd\u5b8c\u5168\u76f8\u540c\u7684\u68c0\u6d4b\u5143\u4ef6\uff0c\u4ed6\u4eec\u540c\u65f6\u611f\u53d7\u73af\u5883\u6761\u4ef6\u91cf\uff0c\u4f46\u53ea\u6709\u4e00\u4e2a\u611f\u53d7\u88ab\u6d4b\u91cf\u3002\u5176\u4f5c\u7528\u662f\u5c06\u540c\u65f6\u4f5c\u7528\u5728\u4e24\u4e2a\u68c0\u6d4b\u5143\u4ef6\u4e0a\u7684\u73af\u5883\u6761\u4ef6\u91cf\u7684\u5e72\u6270\u4fe1\u606f\u9664\u53bb\uff0c\u5bf9\u88ab\u6d4b\u91cf\u4fe1\u606f\u8fdb\u884c\u653e\u5927\u3002\u53c2\u6bd4\u53ef\u4ee5\u8f83\u597d\u5730\u6d88\u9664\u5e72\u6270\u6765\u6e90\u660e\u786e\u5730\u73af\u5883\u6761\u4ef6\u91cf\u7684\u5f71\u54cd\u3002</li> </ul> <p>\u540c\uff1a</p> <ul> <li>\u90fd\u80fd\u4e00\u5b9a\u7a0b\u5ea6\u514b\u670d\u73af\u5883\u5e72\u6270\u3002</li> </ul>"},{"location":"courses/Sensing%26Detection/Midterm/#_3","title":"\u538b\u963b\u5f0f\u3001\u538b\u7535\u5f0f\u3001\u538b\u78c1\u5f0f","text":"\u4ece\u5e94\u7528\u89d2\u5ea6\u8ba8\u8bba\u5e76\u5206\u6790\u538b\u963b\u5f0f\u3001\u538b\u7535\u5f0f\u548c\u538b\u78c1\u5f0f\u68c0\u6d4b\u5143\u4ef6\u5404\u6709\u4ec0\u4e48\u7279\u70b9\uff1f  <ul> <li>\u538b\u963b\u5f0f</li> </ul> <p>\u6d4b\u91cf\u8303\u56f4\u5bbd\u3001\u51c6\u786e\u5ea6\u9ad8\uff0c\u54cd\u5e94\u901f\u5ea6\u5feb\uff0c\u9002\u5408\u9759\u6001\u548c\u52a8\u6001\u6d4b\u91cf\uff0c\u4f7f\u7528\u5bff\u547d\u957f\uff0c\u6027\u80fd\u7a33\u5b9a\uff0c\u4ef7\u683c\u4fbf\u5b9c\uff0c\u53ef\u4ee5\u5728\u9ad8\u5f3a\u5ea6\u6076\u52a3\u73af\u5883\u4e0b\u5de5\u4f5c\u3002</p> <p>\u4f46\u6709\u8f93\u51fa\u4fe1\u53f7\u5fae\u5f31\uff0c\u6297\u5e72\u6270\u80fd\u529b\u5dee\uff0c\u6613\u53d7\u6e29\u5ea6\u7b49\u73af\u5883\u56e0\u7d20\u7684\u5f71\u54cd\uff0c\u5927\u5e94\u53d8\u72b6\u6001\u4e0b\u6709\u8f83\u5927\u7684\u975e\u7ebf\u6027\u3002</p> <p>\u5e94\u7528\uff1a\u88ab\u7c98\u8d34\u5728\u5404\u79cd\u5f39\u6027\u5143\u4ef6\u4e0a\uff0c\u4ee5\u611f\u53d7\u538b\u529b\u53d8\u5316\u3002</p> <ul> <li>\u538b\u7535\u5f0f</li> </ul> <p>\u5177\u6709\u9891\u5e26\u5bbd\u3001\u7075\u654f\u5ea6\u9ad8\u3001\u7ed3\u6784\u7b80\u5355\u3001\u5de5\u4f5c\u53ef\u9760\u3001\u91cd\u91cf\u8f7b\u7b49\u4f18\u70b9\u3002</p> <p>\u4f46\u53ea\u9002\u5408\u52a8\u6001\u6d4b\u91cf\u3002</p> <p>\u5e94\u7528\uff1a\u53ef\u4ee5\u5b9e\u73b0\u529b\u3001\u538b\u529b\u3001\u52a0\u901f\u5ea6\u548c\u626d\u77e9\u7b49\u7269\u7406\u91cf\u7684\u6d4b\u91cf\u3002</p> <ul> <li>\u538b\u78c1\u5f0f</li> </ul> <p>\u8f93\u51fa\u529f\u7387\u5927\uff0c\u6297\u5e72\u6270\u80fd\u529b\u53ca\u8fc7\u8f7d\u80fd\u529b\u5f3a\uff0c\u4fbf\u4e8e\u5236\u9020\uff0c\u7ecf\u6d4e\u5b9e\u7528\uff0c\u5e76\u80fd\u5728\u6076\u52a3\u7684\u6761\u4ef6\u4e0b\u957f\u671f\u4f7f\u7528\u3002</p> <p>\u4f46\u6d4b\u91cf\u7cbe\u5ea6\u4e0d\u9ad8\uff0c\u53cd\u5e94\u901f\u5ea6\u8f83\u6162\u3002</p> <p>\u5e94\u7528\uff1a\u4e3b\u8981\u5e94\u7528\u4e8e\u6d4b\u529b\u3001\u79f0\u91cd\u3001\u6e29\u5ea6\u6d4b\u91cf\u53ca\u76c8\u5229\u65e0\u635f\u68c0\u6d4b\u7b49\u65b9\u9762\u3002</p>"},{"location":"courses/Sensing%26Detection/Midterm/#_4","title":"\u51cf\u5c11\u968f\u673a\u8bef\u5dee\u3001\u975e\u7ebf\u6027\u8865\u507f","text":"\u68c0\u6d4b\u4eea\u8868\u5e38\u7528\u7684\u51cf\u5c11\u968f\u673a\u8bef\u5dee\u548c\u8fdb\u884c\u975e\u7ebf\u6027\u8865\u507f\u7684\u65b9\u6cd5\u4e3b\u8981\u6709\u54ea\u4e9b\uff1f  <ul> <li>\u51cf\u5c11\u968f\u673a\u8bef\u5dee\u7684\u65b9\u6cd5\u3002</li> </ul> <p>\u63d0\u9ad8\u68c0\u6d4b\u7cfb\u7edf\u51c6\u786e\u5ea6\uff0c\u5bf9\u6d4b\u91cf\u7ed3\u679c\u8fdb\u884c\u7edf\u8ba1\u5904\u7406\uff0c\u6291\u5236\u566a\u58f0\u5e72\u6270\u3002</p> <ul> <li>\u8fdb\u884c\u975e\u7ebf\u6027\u8865\u507f\u3002</li> </ul> <p>\u76f4\u63a5\u4e32\u8054\u6cd5\uff0c\u975e\u7ebf\u6027\u8d1f\u53cd\u9988\u6cd5\uff0c\u8f6f\u4ef6\u7ebf\u6027\u5316\u6cd5</p>"},{"location":"courses/Sensing%26Detection/Midterm/#_5","title":"\u5f00\u73af\u3001\u95ed\u73af\u7ed3\u6784\u4eea\u8868","text":"\u6bd4\u8f83\u5206\u6790\u4e00\u4e0b\u5f00\u73af\u7ed3\u6784\u548c\u95ed\u73af\u7ed3\u6784\u4eea\u8868\u5404\u81ea\u7684\u7279\u70b9\u3002(\u53cb\u60c5\u63d0\u9192:\u7b2c\u4e00\u7ae0\u548c\u7b2c\u4e09\u7ae0\u7684\u76f8\u5173\u5185\u5bb9\u8981\u4e00\u8d77\u8003\u8651\uff0c\u5e76\u4ece\u81ea\u52a8\u63a7\u5236\u539f\u7406\u7684\u89d2\u5ea6\u6765\u8fdb\u884c\u5206\u6790\u3002)  <ul> <li>\u5f00\u73af\u7ed3\u6784\u4eea\u8868</li> </ul> <p>\u7531\u82e5\u5e72\u4e2a\u73af\u8282\u4e32\u8054\u7ec4\u6210\uff0c\u4eea\u8868\u7684\u4fe1\u606f\u548c\u53d8\u6362\u53ea\u6cbf\u4e00\u4e2a\u65b9\u5411\u4f20\u9012\u3002\u5176\u603b\u7684\u4f20\u9012\u51fd\u6570\u4e3a\u5404\u73af\u8282\u4f20\u9012\u51fd\u6570\u4e4b\u79ef\uff0c\u6574\u53f0\u4eea\u8868\u7684\u76f8\u5bf9\u8bef\u5dee\u4e3a\u5404\u4e2a\u73af\u8282\u7684\u76f8\u5bf9\u8bef\u5dee\u4e4b\u548c\u3002</p> <p>\u603b\u4f53\u6765\u8bf4\u7ed3\u6784\u7b80\u5355\u3002\u5f53\u7ec4\u6210\u4eea\u8868\u7684\u73af\u8282\u8f83\u591a\u65f6\uff0c\u51c6\u786e\u5ea6\u8f83\u4f4e\u3002</p> <ul> <li>\u95ed\u73af\u7ed3\u6784\u4eea\u8868</li> </ul> <p>\u7531\u6b63\u5411\u901a\u9053\u548c\u53cd\u9988\u901a\u9053\u7ec4\u6210\u3002\u5bf9\u4e8e\u4e00\u9636\u73af\u8282\\(G = \\frac{k}{1+Ts}\\)\uff0c\u82e5\u6709\u53cd\u9988\u589e\u76ca\\(\\beta\\)\uff0c\u5176\u653e\u5927\u500d\u6570\u548c\u65f6\u95f4\u5e38\u6570\u90fd\u662f\u5f00\u73af\u7ed3\u6784\u4eea\u8868\u7684\\(1/(1+k\\beta)\\)\u3002\u82e5\\(k\\beta \\rightarrow \\infty\\)\uff0c\u5219\\(G' = K_0/\\beta\\)\uff0c\u5373\u4eea\u8868\u7279\u6027\u4e3b\u8981\u53d6\u51b3\u4e8e\u53cd\u9988\u901a\u9053\u7279\u6027\u3002</p> <p>\u603b\u4f53\u7ed3\u6784\u4f1a\u590d\u6742\u4e00\u4e9b\uff0c\u7a33\u5b9a\u6027\u4f1a\u8f83\u5dee\u3002\u4f46\u662f\u53cd\u5e94\u901f\u5ea6\u5feb\uff0c\u7ebf\u6027\u597d\uff0c\u51c6\u786e\u5ea6\u9ad8\u3002</p>"},{"location":"courses/Sensing%26Detection/Midterm/#_6","title":"\u6807\u51c6\u5dee\u4e0e\u7cfb\u7edf\u3001\u7c97\u5927\u8bef\u5dee","text":"\u8bf7\u5217\u51fa\u6d4b\u91cf\u4fe1\u53f7\u5747\u503c\u548c\u6807\u51c6\u5dee\u7684\u5b9a\u4e49\u516c\u5f0f\uff0c\u5e76\u7b80\u8981\u8bba\u8ff0\u4e00\u4e0b\u8be5\u4e24\u4e2a\u91cd\u8981\u7edf\u8ba1\u91cf\u5728\u7cfb\u7edf\u8bef\u5dee\u548c\u7c97\u5927\u8bef\u5dee\u5224\u522b\u4e2d\u7684\u4f5c\u7528\u3002  <ul> <li>\u5747\u503c</li> </ul> \\[ \\overline{x}=\\sum\\limits_{i=1}^{n}x_i \\] <ul> <li>\u6807\u51c6\u5dee</li> </ul> <p>\u5355\u6b21\u6d4b\u91cf\u503c\u7684\u6807\u51c6\u5dee(\u8d1d\u585e\u5c14Bessel\u516c\u5f0f)</p> \\[ \\sigma_B=s(x) = \\sqrt{\\frac{\\sum\\limits_{i=1}^{n}(x_i - \\overline{x})^2}{n-1}} \\] <p>\u7b97\u672f\u5e73\u5747\u503c\\(\\overline{x}\\)\u7684\u6807\u51c6\u5dee</p> \\[ s(\\overline{x}) = \\frac{s(x)}{\\sqrt{n}} \\] <p>\u53ef\u4ee5\u7528\u6807\u51c6\u5dee\u5224\u636e\uff0c\u770b\u4e24\u4e2a\u4f30\u8ba1\u6807\u51c6\u5dee\u662f\u5426\u6e10\u8fdb\u76f8\u7b49\u3002\u82e5\u5b58\u5728\u7cfb\u7edf\u8bef\u5dee\uff0c\u5219\u4e24\u8005\u76f8\u5dee\u5f88\u5927\u3002</p> <p>\\(\\sigma\\)\u6cd5\u53ef\u4ee5\u5254\u9664\u7c97\u5927\u8bef\u5dee\u3002\u5f53\u6d4b\u91cf\u503c\\(x_i\\)\u6ee1\u8db3\u62c9\u4f0a\u8fbe\u6cd5\u6216\u683c\u62c9\u5e03\u65af\u6cd5\u7684\u6761\u4ef6\u65f6\uff0c\u53ef\u4ee5\u8ba4\u5b9a\u4e3a\u7c97\u5927\u8bef\u5dee\uff08\u5982\\(3\\sigma\\)\uff09\u3002</p>"},{"location":"courses/Sensing%26Detection/Midterm/#_7","title":"\u6700\u5927\u7edd\u5bf9\u8bef\u5dee\u3001\u6807\u51c6\u5dee\u7684\u4f30\u8ba1","text":"\u73b0\u6709\u4e00\u53f0\u6e29\u5ea6\u4f20\u611f\u5668\uff0c\u91cf\u7a0b\u4e3a0~100\u00b0C\uff0c\u5176\u51c6\u786e\u5ea6(\u7cbe\u5ea6)\u7b49\u7ea7\u4e3a1.0\u3002\u8bf7\u95ee\u8be5\u4f20\u611f\u5668\u5728\u91cf\u7a0b\u8303\u56f4\u5185\u53ef\u80fd\u51fa\u73b0\u7684\u6700\u5927\u7edd\u5bf9\u8bef\u5dee\u7684\u5408\u7406\u4f30\u8ba1\u503c\u548c\u53ef\u80fd\u51fa\u73b0\u7684\u6700\u5927\u6807\u51c6\u5dee\u7684\u5408\u7406\u4f30\u8ba1\u503c\u5206\u522b\u4e3a\u591a\u5c11?\u4e3a\u4ec0\u4e48?(\u53cb\u60c5\u63d0\u9192:\u4ed4\u7ec6\u770b\u4e00\u4e0b\u6559\u6750P13\u9875)  <ul> <li>\u6700\u5927\u7edd\u5bf9\u8bef\u5dee</li> </ul> \\[ e = 100 \\times 1\\% = 1 \u00b0C \\] <ul> <li>\u6700\u5927\u6807\u51c6\u5dee</li> </ul> \\[ 3\\sigma = 1 \u00b0C\\Rightarrow \\sigma = 1/3\u00b0C \\]"},{"location":"courses/Sensing%26Detection/Midterm/#_8","title":"\u8ba1\u7b97\u9898","text":"<p>\u4e3a\u4e86\u4fdd\u8bc1\u6d4b\u91cf\u51c6\u786e\u5ea6\uff0c\u5728\u538b\u529b\u68c0\u6d4b\u8868\u9009\u578b\u65f6\uff0c\u4e00\u822c\u8981\u6c42\u6700\u5927\u5de5\u4f5c\u538b\u529b\u4e0d\u5e94\u8d85\u8fc7\u4eea\u8868\u6ee1\u91cf\u7a0b\u7684\\(3/4\\)\uff0c\u6700\u5c0f\u5de5\u4f5c\u538b\u529b\u4e0d\u5e94\u4f4e\u4e8e\u6ee1\u91cf\u7a0b\u7684\\(1/3\\)\u3002\u76ee\u524d\u6211\u56fd\u51fa\u5382\u7684\u538b\u529b(\u5305\u62ec\u5dee\u538b)\u68c0\u6d4b\u4eea\u8868\u6709\u7edf\u4e00\u7684\u91cf\u7a0b\u7cfb\u5217\uff0c\u5b83\u4eec\u662f\\(1\\)\u3001\\(1.6\\)\u3001\\(2.5\\)\u3001\\(4.0\\)\u3001\\(6.0kPa\\) \u4ee5\u53ca\u5b83\u4eec\u7684\\(10^n\\)\u500d\u6570(\\(n\\)\u4e3a\u6574\u6570)\u3002</p> <p>\u67d0\u538b\u529b\u5bb9\u5668\u6b63\u5e38\u5de5\u4f5c\u65f6\u538b\u529b\u8303\u56f4\u4e3a\\(1.0~1.5MPa\\),\u8981\u6c42\u6d4b\u91cf\u8bef\u5dee\u4e0d\u5927\u4e8e\u88ab\u6d4b\u538b\u529b\u76845%,\u8bd5\u786e\u5b9a\u8be5\u8868\u7684\u91cf\u7a0b\u548c\u51c6\u786e\u5ea6\u7b49\u7ea7\u3002</p> <ul> <li>\u89e3\uff1a</li> </ul> <p>\u8bbe\u91cf\u7a0b\u4e3a\\(A (MPa)\\)\uff0c\u5219\u6ee1\u8db3</p> \\[ \\begin{cases} \\frac{1}{3}A \\leq 1.0 \\\\ 1.5 \\leq \\frac{3}{4}A \\end{cases} \\] <p>\u89e3\u5f97\\(2.0\\leq A \\leq 3.0\\)\uff0c\u6545\u53d6\\(A=2.5 MPa\\)</p> <p>\u7531\u9898\u610f\uff0c\u4eea\u8868\u57fa\u672c\u8bef\u5dee\\(e \\leq 5\\% P\\)\uff0c\u6545\u5fc5\u987b\u8981</p> \\[ e \\leq 5\\% \\min{P} = 0.05\\times 1.0 = 0.05MPa \\] <p>\u6240\u4ee5\u4eea\u8868\u6ee1\u91cf\u7a0b\u57fa\u672c\u8bef\u5dee</p> \\[ e' \\leq \\frac{e}{A} = 2\\% \\] <p>\u6545\u9009\u62e9\u51c6\u786e\u5ea6\\(1.5\\)\u3002</p>"},{"location":"courses/cpp/cpp/","title":"C Plus Plus","text":""},{"location":"courses/cpp/cpp/#c","title":"C++","text":""},{"location":"courses/cpp/cpp/#basic-ideas","title":"Basic Ideas","text":"<ul> <li>object-oriented | \u7269\u4ef6\u5bfc\u5411-\u9762\u5411\u5bf9\u8c61</li> </ul> <p>An object, or entity(either visible or invisible), is a variable in programming languages, made up of two primary components:</p> <ul> <li>Attibutes, or Data, representing the object's properties and status</li> <li>Services, or Operations, refered to as functions in programming.</li> </ul> <p>C++ Focuses on things instead of operations.</p>"},{"location":"courses/cpp/cpp/#key-words","title":"Key words","text":"<ul> <li>interface</li> <li>communications</li> <li>protection</li> <li>the hidden implementation</li> <li>encapsulation</li> </ul> First Program of C++<pre><code># include &lt;iostream&gt;\nusing namespace std;\nint main(){\n  cout&lt;&lt;\u201cHello,World!I am\u201d\n}\n</code></pre>"},{"location":"courses/cpp/cpp/#oop-characteristics","title":"OOP characteristics","text":"<ul> <li>Everything is an object.</li> <li>A program is a bunch of objects telling each other what to do/(not how to do) by sending messages</li> <li>Each object has its own memory made up of other objects.</li> <li>Every object has a type.</li> <li>All objects of a particular type can receive the same messages. (Using the method to distinguish between different types or classes)</li> </ul>"},{"location":"courses/cpp/cpp/#header-files","title":"Header Files","text":"<p>To prevent defining repeatedly:</p> <p>x.h<pre><code># pragma once //\u53ea\u5305\u542b\u8fd9\u4e2a\u5934\u6587\u4ef6\u4e00\u6b21\n</code></pre> or the same as C language:</p> log.h<pre><code># ifndef _LOG_H\n# define _LOG_H\n//...//\n# endif\n</code></pre>"},{"location":"courses/cpp/cpp/#declaration","title":"declaration","text":"<ul> <li>external variables</li> <li>function prototypes</li> <li>class/struct declarations</li> </ul>"},{"location":"courses/cpp/cpp/#resolver","title":":: resolver","text":"::<pre><code>&lt;Class Name&gt;::&lt;function name&gt;//not free\n::&lt;function name&gt;\n\nvoid S::f(){\n  ::f();//would be recursive otherwise\n  ::a++;//select the global a\n  a\u2014;//select the partial a\n}\n</code></pre>"},{"location":"courses/cpp/cpp/#string","title":"String","text":"C++<pre><code>#include&lt;string&gt;\nString age, name; \ncin &gt;&gt; age &gt;&gt; name;\ncout &lt;&lt; name; \n</code></pre> <ul> <li>A class type, not a primitive type.</li> <li>Initially <code>name</code> is all zero. No matter it is static or global.</li> <li>No <code>\\0</code> at the end of the string.</li> </ul>"},{"location":"courses/cpp/cpp/#dynamically-allocated-memory","title":"Dynamically allocated memory","text":"<p><code>new</code> (operator) has 2 steps:</p> <ul> <li>allocate space</li> <li>call the constructor function</li> </ul> C++<pre><code>int *p1 = new int // malloc(sizeof(int)); + constructor\nint *p2 = new int [10] // continuous space allocated\n</code></pre> <p><code>delete</code> + pointer</p> <p>If delete a constructed type, it will implement <code>D\u2019tor</code> function</p> <p>C++<pre><code>p2 = new student [10];\ndelete p2; // remove the first one\ndelete[] p2; // remove whole 10 objects\n</code></pre> it is safe to delete a <code>NULL</code>.</p>"},{"location":"courses/cpp/cpp/#reference","title":"Reference","text":"<p>Reference make use of  the idead of a pointer, but is used as a normal variable rather than pointer. It is widely used in passing variables into a function.</p> C++<pre><code>char c;\nchar &amp; r = c;// a reference to c;\n</code></pre> <p>Some notes on reference:</p> <ul> <li>cannot be <code>NULL</code>.</li> <li>cannot calculate.</li> <li>No reference to reference</li> </ul> C++<pre><code>int &amp;* r; // No pointer to reference \nint *&amp; r; // We have reference to pointer\n</code></pre>"},{"location":"courses/cpp/cpp/#classstruct","title":"Class(Struct)","text":"<p>Intuitively, we put a function into a <code>struct</code> and it bacome <code>class</code>.(we can use functional point in C) act like a type.</p>"},{"location":"courses/cpp/cpp/#definition","title":"Definition","text":"<p>We all know the principle of designing:</p> <p>separated .h &amp;.cpp are used to define one class</p> <ul> <li> <p>Header file(.h): class declaration&amp;prototype</p> </li> <li> <p>Source file(.cpp): all the bodies of functions</p> </li> </ul> <p>Hidden parameter: <code>this</code>, which is a pointer to the variable.</p> Publicprivate C++<pre><code>struct point{\n  float x;\n  float y;\n  void init(int x, int y){\n    this-&gt;x=x;\n    this-&gt;y=y;\n  }\n  void print(){\n    cout &lt;&lt; x &lt;&lt; \", \" &lt;&lt; y &lt;&lt;endl;\n  }\n}\n</code></pre> C++<pre><code>class point{\nprivate:\n  float x;\n  float y; //the above data is protected.\n\npublic://the followings can be accessed from outside\n  void init(int x, int y){\n    this-&gt;x=x;\n    this-&gt;y=y;\n  }\n  void print(){\n    cout &lt;&lt; x &lt;&lt; \", \" &lt;&lt; y &lt;&lt;endl;\n  }\n}\n</code></pre>"},{"location":"courses/cpp/cpp/#object-an-instance-of-class","title":"Object | an instance of class","text":""},{"location":"courses/cpp/cpp/#ctor-constructor","title":"C\u2019tor (constructor)","text":""},{"location":"courses/cpp/cpp/#constructor-list","title":"constructor list","text":"<ul> <li>using Initialization list</li> </ul> <p>C++<pre><code>class A{\n  private:\n    int i;\n    int j= i;\n\n  public:\n    A():i(11){}\n}\n</code></pre> Initialization versus Assignment</p> <p>C++<pre><code>Stu::Stu(string s):name(s){} // better to use\nStu::Stu(string s){name=s;}\n</code></pre> Equivalent:</p> C++<pre><code>string place(\u201cHangzhou\u201d);\nstring place = \u201cHangzhou\u201d;\n\nint i = 6;\nint i(6); \n</code></pre> <p>A constructor function:</p> <p>C++<pre><code>point::point(int x, int y){\n  this-&gt;x=x;\n  this-&gt;y=y;\n}\n</code></pre> then use it:</p> <p>C++<pre><code>point a(1,2);\n</code></pre> And if the constructor function only takes in one parameter, like </p> <p>C++<pre><code>point::point(int dep){\n  this-&gt;x=this-&gt;y=dep;\n}\n</code></pre> then we can use it to initialize:</p> <p>C++<pre><code>point a(1);\npoint a=10;\n</code></pre> we can not initialize a point like we do in struct:</p> C++<pre><code>point a ={1,2}; // this can succeed only when the class does not have a constructor function and the parameter is public.\n</code></pre>"},{"location":"courses/cpp/cpp/#default-constructor","title":"default constructor","text":"<p>It is a function that can be called with no arguments input.</p> <p>If we don\u2019t give any constructor function, then the system can give one that does nothing.</p> <p>If we offer a constructor function that takes input of more than one parameter, we have no default constructor function.</p> <p>C++<pre><code>struct Y{\n  float y;\n  int i;\n  Y(int a);\n}\n</code></pre> then:</p> C++<pre><code>Y y1[] = {Y(1), Y(2)}; // right\nY y2[2] {Y(1)}; // wrong\nY y3[7]; //wrong\nY y4;  //wrong\n</code></pre>"},{"location":"courses/cpp/cpp/#dtordestructor","title":"D\u2019tor(destructor)","text":"<p>This function would be implemented before the memory is recycled.</p> <p>To design it, please add tilde <code>~</code> before the name of the class. The function have no input and output.</p> <p>It will delete local objects in a reverse manner.(caused by stack action)</p> C++<pre><code>class point{\nprivate:\n  float x;\n  float y;\n//the above data is protected.\n\npublic://can be accessed from outside\n  point(int dep); // reload\n  point(int x, int y);\n  ~point();\n  void print();\n}\n</code></pre>"},{"location":"courses/cpp/cpp/#stlstandard-template-library","title":"STL(standard template library)","text":"<p>All the following identifiers in library are in <code>std</code> namespace.</p> <p>This is also called Container(lowercase)</p>"},{"location":"courses/cpp/cpp/#sequential","title":"Sequential","text":""},{"location":"courses/cpp/cpp/#vectorvariable-array","title":"vector(variable array)","text":"<p>It is easy to use index to search and save memory</p> C++<pre><code>vector&lt;typeName&gt; vt(n_ele);\nvector&lt;int&gt; x;\nx.push_back(1);\n</code></pre> <p>reload p++ </p> <p>C++<pre><code>vector&lt;int&gt;::iterator p;\nfor(p=x.begin(); p&lt;x.end(); p++)\n  cout &lt;&lt; *p &lt;&lt; \u201c \u201c;\n</code></pre> or  C++<pre><code>for(auto k: x)\ncout &lt;&lt; k &lt;&lt; \u201c \u201c;\n</code></pre></p> <p><code>auto</code> means the compiler can identify the type of the variable itself.</p> <p>for \u4ec5\u7528\u4e8e\u904d\u5386\u5168\u90e8(range-based for loops)</p> <p>\u653e\u8fdb\u5bb9\u5668\u91cc\u7684\u5185\u5bb9\u662fclone</p> <p>\u76f4\u63a5\u4f7f\u7528\u4e0b\u6807\uff0c\u4e0d\u4f7f\u7528<code>push_back</code>/<code>pop</code> \u662f\u4e0d\u4f1a\u6539\u53d8size\u7684\u3002</p> C++<pre><code>x[999] = 9; // no error but invalid\n</code></pre>"},{"location":"courses/cpp/cpp/#array","title":"array","text":"<ul> <li>fixed length, use stack.</li> </ul> <p>C++<pre><code>array&lt;typeName, n_ele&gt; arr;\n</code></pre> <code>n_ele</code> should be constant</p>"},{"location":"courses/cpp/cpp/#listdouble-linked-list","title":"list(double-linked-list)","text":"<p>It can insert/delete items very quickly.</p> <p>C++<pre><code>list&lt;int&gt; L;\nlist&lt;int&gt;::iterator li;\nli = L.begin();\nL.erase();\n++li; //wrong! li has been removed.\n</code></pre> right:</p> C++<pre><code>li = L.erase(li)\nli now points to nest node\n</code></pre>"},{"location":"courses/cpp/cpp/#others","title":"others","text":"<ul> <li>Deque(double ended queue)</li> <li>maps(HashMap)</li> </ul> C++<pre><code>map&lt;string, float&gt; price;\nprice[\u201csnapple\u201d] =0.75\n</code></pre> <ul> <li>forward_list</li> <li>array</li> <li>string</li> </ul>"},{"location":"courses/cpp/cpp/#using-class","title":"Using Class","text":""},{"location":"courses/cpp/cpp/#function-overloading","title":"Function overloading","text":"<p>For function with the same name, compiler will choose from different function according to different input/labels.</p> <p>Pay attention to primitive type input</p> C++<pre><code>void f(int i){}\nvoid f(double d){}\n\nint main() {\n  f(\u2018a\u2019); //despite smaller than int, it can be transformed\n  f(2); // ambiguous\n  f(2L); // ambiguous\n  f(3.2); // ok\n}\n</code></pre>"},{"location":"courses/cpp/cpp/#default-argument","title":"Default argument","text":"<p>we should give default argument from right to left:</p> C++<pre><code>int harpo(int n, int m, int j=5);\nint chico(int n, int m=6, int j); //illegal\n</code></pre> <p>default argument must be written in declaration, i.e. in \".h\" file. We can not write it in definition, but always in calling back.</p>"},{"location":"courses/cpp/cpp/#friend","title":"Friend","text":"<p>A declaration, which cannot append.</p>"},{"location":"courses/cpp/cpp/#inline-function","title":"inline function | \u5185\u8054","text":"<p>It can check the type, which is better than Macro(\u5b8f)!</p> <p>C++<pre><code>inline double square(double x);\ninline double square(double x){ return x*x;}\n</code></pre> is only a declaration instead of a definition, so the compiler must see the body of function!</p> <ul> <li>compiler must see body so it can compile!(not just write down as a declaration)</li> </ul> <p>Body of inline function must be put in \".h\" files so it can be used in another file!</p> <ul> <li>if you write a inline function in a \".cpp\" file, you mean the function should only be used locally.</li> </ul> <p>Function that can be used <code>inline</code>:</p> <ul> <li>small function</li> <li>frequently called function</li> </ul> <p>others that cannot be used <code>inline</code>:</p> <ul> <li>long function</li> <li>recursive function</li> </ul>"},{"location":"courses/cpp/cpp/#const","title":"Const","text":"<p>constants are variables -    (instant \u7acb\u5373\u6570)</p> C++<pre><code>const int a = 6; \n</code></pre> <ul> <li>literal -&gt; 6</li> <li>constant -&gt; a</li> </ul> <p>Distinguish:</p> C++<pre><code>String p1(\u201cFred\u201d);\nconst string * p = &amp;p1; //(1)\nstring const * p = &amp;p1; //(2)\nstring * const p = &amp;p1; //(3)\n</code></pre> HintsAnswer <p>Const only restrict one variable.</p> <p>(1)(2) are the same: <code>(*p)</code> can not change; That is, we cannot change <code>p1</code> through <code>(*p)</code>.</p> <p>(3) means the pointer <code>p</code> itself cannot change but p1 itself can still change.</p> C++<pre><code>int i; \nconst int ci = 3;\n\nint *ip = &amp;i; \nint *ip = &amp;ci; // illegal, that is, a changeable pointer now points a non-changeable variable, which is illegal in compiler.\n\nconst int * cip = &amp;i;\nconst int * cip = &amp;ci;\n</code></pre>"},{"location":"courses/cpp/cpp/#passing-returning-by-const-value","title":"Passing &amp; returning by const value","text":"<p>We do this in case that we change some value in a function. So we let compiler check.</p>"},{"location":"courses/cpp/cpp/#const-object","title":"Const object","text":"<p>in a function, we pass a pointer instead of a copy! (1) public (2) change value by inner function</p> C++<pre><code>int get_day(void) const;\nint get_day(void) const {return day;}\n\nconst A a; // must provide a an initial value!(or constructor) because later we cannot change it! Like below:\n\nconst int i=1; // we cannot do this before C11\n\npublic:\n  A(int k): i(k){}\n</code></pre> <ul> <li>constant i cannot change during execution, but need a value in initialization.</li> </ul> <p>C++<pre><code>class A {\nprivate:\n  int i=0;\npublic:\n  void f() {i=10;\n    cout &lt;&lt; \u201cA::f()\u201d&lt;&lt; end;\n  }\n  void f() const {\n    cout &lt;&lt; \u201cA::f() const\u201d&lt;&lt; end;\n  }\n}\n</code></pre> The above means:</p> C++<pre><code>public:\n  void f(A *this) {i=10;\n    cout &lt;&lt; \u201cA::f()\u201d&lt;&lt; end;\n  }\n  void f(const A *this) const {\n    cout &lt;&lt; \u201cA::f() const\u201d&lt;&lt; end;\n  }\n</code></pre> <p>So:</p> <p>C++<pre><code>const A a;\nA b;\na.f(); // &lt;&lt;\u201cA::f() const\u201d\nb.f(); // &lt;&lt;\u201cA::f()\u201d\n</code></pre> The above code is using overload, and there are two different f() that have been distinguished by \u201cconst\u201d</p>"},{"location":"courses/cpp/cpp/#static","title":"Static","text":"<p>on members which are </p> <ul> <li>Hidden</li> <li>Persistent</li> </ul> <p>static variable is actually global variable.</p> <p>static function can only access static variable!</p> <p>C++<pre><code>static int i; // can be accessed by all the objects of same class\n</code></pre> we must define the static variable (global variable) before main!</p> <p>C++<pre><code>int A::i;\n</code></pre> Note: without static!</p> <p>C++<pre><code>static void sf(){\n  i++;\n}\n</code></pre> we can call static function without creating an object! Just use class!</p> C++<pre><code>int main(){\n  A::sf();\n}\n</code></pre> <p>We can eliminate global variable because we can limit it in class, which can prevent arbitrary changes!</p>"},{"location":"courses/cpp/cpp/#inheritance","title":"Inheritance","text":"<p>Allow sharing of design for</p> <ul> <li>Member data</li> <li>Member functions</li> <li>Interfaces</li> </ul> <p>Advantages:</p> <ul> <li>extendable</li> <li>avoid code duplication</li> <li>code reuse </li> </ul> <p>B is a A:</p> <ul> <li>A: Base/super/parent class</li> <li>B: derived/sub/child class</li> </ul> employee.h<pre><code>class Employee\n{\npublic: \n  Employee(const string&amp; _name, const string &amp; _ssn): name(_name), ssn(_ssn){}\n\n  void print() const\n{\n  cout &lt;&lt; name &lt;&lt; endl;\n  cout &lt;&lt; ssn &lt;&lt; endl;\n}\n\n  void print(const string &amp; msg) const {\n  cout &lt;&lt; msg &lt;&lt; endl;\n  print(); // we rewrite the print function, then the child cannot access print from parent!\n// Name Hide!\n}\n\nprotected:\n// private: // can not access from child class\n  const string name;\n  const string ssn;\n}\n</code></pre> manager.h<pre><code>class Manager: public Employee\n{\npublic:\n  Manager(const string &amp; _name, const string &amp; _ssn, const string &amp; _title): Employee(_name, _ssn), title(_title) {}\n\n  const string &amp; getTitle() const\n{\n  return title;\n}\n\n  void print() const\n{\n  Employee::print();\n  cout &lt;&lt; title &lt;&lt; end;\n}\n\nprotected:\n  const string title;\n}\n</code></pre>"},{"location":"courses/cpp/cpp/#polymorphism","title":"Polymorphism","text":""},{"location":"courses/cpp/cpp/#up-casting","title":"up-casting | \u9020\u578b","text":"<ul> <li>cast: \u7c7b\u578b\u8f6c\u6362</li> </ul> C++<pre><code>int i = (int)3.62;\n</code></pre> <p>But up-casting is</p> <ul> <li>is the act of converting from a derived reference or pointer to a base class reference or pointer.</li> <li>take an object of a derived class as an object of the base one.</li> </ul> <p>(\u6539\u53d8\u4e86\u773c\u5149\uff0c\u4e0d\u6539\u53d8\u5185\u5bb9)</p> <p>encapsulation \u5c01\u88c5\uff1b\u5305\u88c5\uff1b capsulation \u5c01\u88c5\uff1b[\u9ad8\u5206\u5b50] \u5305\u56ca\u5316\u4f5c\u7528\uff1b bonding \u90a6\u5b9a</p>"},{"location":"courses/cpp/cpp/#binding","title":"Binding | \u7ed1\u5b9a","text":"<p>binding: which function to be called</p> <ul> <li>Static binding: call the function as the code(quick) - Non-virtual func</li> <li>Dynamic binding: call the function of the object(slow) - Virtual func</li> </ul> C++<pre><code>Manager Pete(\u201cPete\u201d,\u201d4\u201d, \u201cBakery\u201d);\nEmployee* ep = &amp;pete;\nEmployee &amp; er = pete;\n</code></pre>"},{"location":"courses/cpp/cpp/#override","title":"override | \u8986\u76d6","text":"C++<pre><code>class A\n{\nprotected:\n  int i;\npublic:\n  A() {i=10;}\n  virtual void f() {cout&lt;&lt; \u201cA::f()\u201d&lt;&lt; endl;}\n}\n\nclass B: public A\n{\npublic:\n  int i;\npublic: \n  B(){ i=20; cout&lt;&lt; \u201cB::i\u201d &lt;&lt; i &lt;&lt;endl;}\n  void f() {cout&lt;&lt; \u201cB::f()\u201d&lt;&lt; endl;}\n}\n\ncout &lt;&lt; sizeof(A) &lt;&lt;\u201c, \u201c &lt;&lt; sizeof(B) &lt;&lt; endl;\n// not just 4, 8 but a complex one!\n</code></pre> <ul> <li>polymorphic variable(* &amp;)</li> </ul> <p>static type  dynamic type</p>"},{"location":"courses/cpp/cpp/#virtual-function","title":"virtual function","text":"<p>a class which has a virtual function: vtable -&gt; table of the address of virtual functions(8 \u4f4dfor 64) (this is formed while compiling)</p> C++<pre><code>B b;\nA * p = &amp;b;\nlong long **vp (long long **)p;\n// vp is a pointer to *long long, that is, to a pointer of type long long.\n\nvoid (*pf)() = (void (*)())(**vp);\n// pf is a function pointer, which matches the definition of f()\n\npf(); // \u201cB::f()\u201d\n</code></pre> <p>Initialize: A will create A\u2019s vtable but B will than create B\u2019s vtable and change the point to the vtable.</p>"},{"location":"courses/cpp/cpp/#slice-off","title":"Slice off","text":"<ul> <li>will copy the content of child object to the parent object while ignoring the extra thins of the child.</li> </ul> <p>C++<pre><code>a = b;\np = &amp;a;\np-&gt;f(); // still execute A\u2019s func\n</code></pre> -   Never redefine an inherited non-virtual function. -   Never redefine an inherited default parameter value.</p> <p>Abstract base classes:</p> <ul> <li>has pure virtual functions</li> <li>Cannot be instantiated</li> </ul> <p>C++<pre><code>virtual void f() =0;\n</code></pre> - Multiple inheritance Day No</p>"},{"location":"courses/cpp/cpp/#dynamic-memory-allocation","title":"Dynamic memory allocation","text":""},{"location":"courses/cpp/cpp/#copy-constructor","title":"Copy constructor","text":"<p>has a unique signature</p> <p>C++<pre><code>T::T(const T&amp;)\n</code></pre> call by reference</p> <p>compiler (in-line) would do it automatically.</p> <p>But how?</p> <ul> <li>member-wise (versus bit-wise)</li> </ul> <p>if it has a class defined, it will iteratively call its copy function.</p>"},{"location":"tag/","title":"Tag","text":"<p>Hey!</p>"}]}